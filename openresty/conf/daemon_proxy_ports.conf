# 动态生成的MCSM Daemon代理端口配置
# 此文件由系统自动生成，请勿手动编辑

# MCSM Daemon代理端口 8000-8255
server {
    listen 8000; listen 8001; listen 8002; listen 8003; listen 8004; listen 8005; listen 8006; listen 8007; listen 8008; listen 8009;
    listen 8010; listen 8011; listen 8012; listen 8013; listen 8014; listen 8015; listen 8016; listen 8017; listen 8018; listen 8019;
    listen 8020; listen 8021; listen 8022; listen 8023; listen 8024; listen 8025; listen 8026; listen 8027; listen 8028; listen 8029;
    listen 8030; listen 8031; listen 8032; listen 8033; listen 8034; listen 8035; listen 8036; listen 8037; listen 8038; listen 8039;
    listen 8040; listen 8041; listen 8042; listen 8043; listen 8044; listen 8045; listen 8046; listen 8047; listen 8048; listen 8049;
    listen 8050; listen 8051; listen 8052; listen 8053; listen 8054; listen 8055; listen 8056; listen 8057; listen 8058; listen 8059;
    listen 8060; listen 8061; listen 8062; listen 8063; listen 8064; listen 8065; listen 8066; listen 8067; listen 8068; listen 8069;
    listen 8070; listen 8071; listen 8072; listen 8073; listen 8074; listen 8075; listen 8076; listen 8077; listen 8078; listen 8079;
    listen 8080; listen 8081; listen 8082; listen 8083; listen 8084; listen 8085; listen 8086; listen 8087; listen 8088; listen 8089;
    listen 8090; listen 8091; listen 8092; listen 8093; listen 8094; listen 8095; listen 8096; listen 8097; listen 8098; listen 8099;
    listen 8100; listen 8101; listen 8102; listen 8103; listen 8104; listen 8105; listen 8106; listen 8107; listen 8108; listen 8109;
    listen 8110; listen 8111; listen 8112; listen 8113; listen 8114; listen 8115; listen 8116; listen 8117; listen 8118; listen 8119;
    listen 8120; listen 8121; listen 8122; listen 8123; listen 8124; listen 8125; listen 8126; listen 8127; listen 8128; listen 8129;
    listen 8130; listen 8131; listen 8132; listen 8133; listen 8134; listen 8135; listen 8136; listen 8137; listen 8138; listen 8139;
    listen 8140; listen 8141; listen 8142; listen 8143; listen 8144; listen 8145; listen 8146; listen 8147; listen 8148; listen 8149;
    listen 8150; listen 8151; listen 8152; listen 8153; listen 8154; listen 8155; listen 8156; listen 8157; listen 8158; listen 8159;
    listen 8160; listen 8161; listen 8162; listen 8163; listen 8164; listen 8165; listen 8166; listen 8167; listen 8168; listen 8169;
    listen 8170; listen 8171; listen 8172; listen 8173; listen 8174; listen 8175; listen 8176; listen 8177; listen 8178; listen 8179;
    listen 8180; listen 8181; listen 8182; listen 8183; listen 8184; listen 8185; listen 8186; listen 8187; listen 8188; listen 8189;
    listen 8190; listen 8191; listen 8192; listen 8193; listen 8194; listen 8195; listen 8196; listen 8197; listen 8198; listen 8199;
    listen 8200; listen 8201; listen 8202; listen 8203; listen 8204; listen 8205; listen 8206; listen 8207; listen 8208; listen 8209;
    listen 8210; listen 8211; listen 8212; listen 8213; listen 8214; listen 8215; listen 8216; listen 8217; listen 8218; listen 8219;
    listen 8220; listen 8221; listen 8222; listen 8223; listen 8224; listen 8225; listen 8226; listen 8227; listen 8228; listen 8229;
    listen 8230; listen 8231; listen 8232; listen 8233; listen 8234; listen 8235; listen 8236; listen 8237; listen 8238; listen 8239;
    listen 8240; listen 8241; listen 8242; listen 8243; listen 8244; listen 8245; listen 8246; listen 8247; listen 8248; listen 8249;
    listen 8250; listen 8251; listen 8252; listen 8253; listen 8254; listen 8255;
    
    server_name _;
    access_log /var/log/openresty/daemon-proxy-access.log main;
    error_log /var/log/openresty/daemon-proxy-error.log;
    
    location / {
        access_by_lua_block {
            -- 动态代理MC服务器的Daemon
            local current_port = ngx.var.server_port
            local nodes_dict = ngx.shared.mc_nodes
            
            if not nodes_dict then
                ngx.log(ngx.ERR, "无法访问节点共享字典")
                ngx.exit(502)
                return
            end
            
            -- 获取节点列表
            local node_list_str = nodes_dict:get("node_list")
            if not node_list_str then
                ngx.log(ngx.ERR, "没有找到节点列表")
                ngx.exit(502)
                return
            end
            
            local cjson = require "cjson"
            local node_list = cjson.decode(node_list_str)
            if not node_list then
                ngx.log(ngx.ERR, "节点列表解析失败")
                ngx.exit(502)
                return
            end
            
            -- 根据端口计算节点索引（8000对应索引1）
            local node_index = tonumber(current_port) - 8000 + 1
            if node_index < 1 or node_index > #node_list then
                ngx.log(ngx.ERR, "端口 " .. current_port .. " 没有对应的节点")
                ngx.exit(404)
                return
            end
            
            local instance_id = node_list[node_index]
            local node_key = "node:" .. instance_id
            local node_str = nodes_dict:get(node_key)
            
            if not node_str then
                ngx.log(ngx.ERR, "找不到节点信息: " .. instance_id)
                ngx.exit(502)
                return
            end
            
            local node = cjson.decode(node_str)
            if not node or not node.private_ip then
                ngx.log(ngx.ERR, "节点信息无效: " .. instance_id)
                ngx.exit(502)
                return
            end
            
            -- 设置代理目标
            local target_host = node.private_ip
            local target_port = node.daemon_port or 24444
            ngx.var.target_upstream = "http://" .. target_host .. ":" .. target_port
            
            ngx.log(ngx.INFO, "代理端口 " .. current_port .. " -> " .. target_host .. ":" .. target_port)
        }
        
        proxy_pass $target_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        client_max_body_size 0;
        proxy_request_buffering off;
        proxy_buffering off;
    }
}