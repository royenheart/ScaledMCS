# 动态生成的MCSM Daemon代理端口配置
# 此文件由系统自动生成，请勿手动编辑

# MCSM Daemon代理端口 8100-8125
server {
    listen 8100;
    listen 8101;
    listen 8102;
    listen 8103;
    listen 8104;
    listen 8105;
    listen 8106;
    listen 8107;
    listen 8108;
    listen 8109;
    listen 8110;
    listen 8111;
    listen 8112;
    listen 8113;
    listen 8114;
    listen 8115;
    listen 8116;
    listen 8117;
    listen 8118;
    listen 8119;
    listen 8120;
    listen 8121;
    listen 8122;
    listen 8123;
    listen 8124;
    listen 8125;
    
    server_name _;
    access_log /var/log/openresty/daemon-proxy-access.log main;
    error_log /var/log/openresty/daemon-proxy-error.log;
    
    location / {
        access_by_lua_block {
            -- 动态代理MC服务器的Daemon
            local current_port = ngx.var.server_port
            local nodes_dict = ngx.shared.mc_nodes
            
            if not nodes_dict then
                ngx.log(ngx.ERR, "无法访问节点共享字典")
                ngx.exit(502)
                return
            end
            
            -- 获取节点列表
            local node_list_str = nodes_dict:get("node_list")
            if not node_list_str then
                ngx.log(ngx.ERR, "没有找到节点列表")
                ngx.exit(502)
                return
            end
            
            local cjson = require "cjson"
            local node_list = cjson.decode(node_list_str)
            if not node_list then
                ngx.log(ngx.ERR, "节点列表解析失败")
                ngx.exit(502)
                return
            end
            
            -- 根据端口计算节点索引（8100对应索引1）
            local node_index = tonumber(current_port) - 8100 + 1
            if node_index < 1 or node_index > #node_list then
                ngx.log(ngx.ERR, "端口 " .. current_port .. " 没有对应的节点")
                ngx.exit(404)
                return
            end
            
            local instance_id = node_list[node_index]
            local node_key = "node:" .. instance_id
            local node_str = nodes_dict:get(node_key)
            
            if not node_str then
                ngx.log(ngx.ERR, "找不到节点信息: " .. instance_id)
                ngx.exit(502)
                return
            end
            
            local node = cjson.decode(node_str)
            if not node or not node.private_ip then
                ngx.log(ngx.ERR, "节点信息无效: " .. instance_id)
                ngx.exit(502)
                return
            end
            
            -- 设置代理目标
            local target_host = node.private_ip
            local target_port = node.daemon_port or 24444
            ngx.var.target_upstream = "http://" .. target_host .. ":" .. target_port
            
            ngx.log(ngx.INFO, "代理端口 " .. current_port .. " -> " .. target_host .. ":" .. target_port)
        }
        
        proxy_pass $target_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        client_max_body_size 0;
        proxy_request_buffering off;
        proxy_buffering off;
    }
}